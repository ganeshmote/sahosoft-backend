import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as Chartist from 'chartist';
/**
 * Possible chart types
 */
import * as ɵngcc0 from '@angular/core';
export declare type ChartType = 'Pie' | 'Bar' | 'Line';
export declare type ChartInterfaces = Chartist.IChartistPieChart | Chartist.IChartistBarChart | Chartist.IChartistLineChart;
export declare type ChartOptions = Chartist.IBarChartOptions | Chartist.ILineChartOptions | Chartist.IPieChartOptions;
export declare type ResponsiveOptionTuple = Chartist.IResponsiveOptionTuple<ChartOptions>;
export declare type ResponsiveOptions = ResponsiveOptionTuple[];
/**
 * Represents chart events.
 */
export interface ChartEvent {
    [eventName: string]: (data: any) => void;
}
/**
 * Angular component which renders Chartist chart.
 *
 * See Chartist {@link https://gionkunz.github.io/chartist-js/api-documentation.html API documentation} and
 * {@link https://gionkunz.github.io/chartist-js/examples.html examples} for more information.
 * ### Example
 ```html
 <x-chartist
   [type]="type"
   [data]="data"
   [options]="options"
   [responsiveOptions]="responsiveOptions"
   [events]="events"
 ></x-chartist>
 ```
 */
export declare class ChartistComponent implements OnInit, OnChanges, OnDestroy {
    private elementRef;
    /**
     * The data object that needs to consist of a labels and a series array.
     */
    data: Chartist.IChartistData;
    /**
     * Chartist chart type.
     */
    type: ChartType;
    /**
     * The options object which overrides the default options.
     */
    options: Chartist.IChartOptions;
    /**
     * An array of responsive option arrays which are a media query and options object pair: [[mediaQueryString, optionsObject],[more...]]
     */
    responsiveOptions: ResponsiveOptions;
    /**
     * Events object where keys are Chartist event names and values are event handler functions.
     *
     * Supported events are: draw, optionsChanged, data, animationBegin, animationEnd, created.
     *
     * Event handler function will receive a data argument which contains event data.
     */
    events: ChartEvent;
    /**
     * Event emitted after Chartist chart has been initialized.
     *
     * Event handler function will receive chart instance argument.
     */
    initialized: EventEmitter<ChartInterfaces>;
    /** @ignore */
    private chart;
    /** @ignore */
    constructor(elementRef: ElementRef);
    /** @ignore */
    ngOnInit(): void;
    /** @ignore */
    ngOnChanges(changes: SimpleChanges): void;
    /** @ignore */
    ngOnDestroy(): void;
    /** @ignore */
    private renderChart;
    /** @ignore */
    private update;
    /** @ignore */
    private bindEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartistComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChartistComponent, "x-chartist", never, { "data": "data"; "type": "type"; "options": "options"; "responsiveOptions": "responsiveOptions"; "events": "events"; }, { "initialized": "initialized"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRpc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNoYXJ0aXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ2hhcnRpc3QgZnJvbSAnY2hhcnRpc3QnO1xuLyoqXG4gKiBQb3NzaWJsZSBjaGFydCB0eXBlc1xuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIENoYXJ0VHlwZSA9ICdQaWUnIHwgJ0JhcicgfCAnTGluZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIENoYXJ0SW50ZXJmYWNlcyA9IENoYXJ0aXN0LklDaGFydGlzdFBpZUNoYXJ0IHwgQ2hhcnRpc3QuSUNoYXJ0aXN0QmFyQ2hhcnQgfCBDaGFydGlzdC5JQ2hhcnRpc3RMaW5lQ2hhcnQ7XG5leHBvcnQgZGVjbGFyZSB0eXBlIENoYXJ0T3B0aW9ucyA9IENoYXJ0aXN0LklCYXJDaGFydE9wdGlvbnMgfCBDaGFydGlzdC5JTGluZUNoYXJ0T3B0aW9ucyB8IENoYXJ0aXN0LklQaWVDaGFydE9wdGlvbnM7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFJlc3BvbnNpdmVPcHRpb25UdXBsZSA9IENoYXJ0aXN0LklSZXNwb25zaXZlT3B0aW9uVHVwbGU8Q2hhcnRPcHRpb25zPjtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgUmVzcG9uc2l2ZU9wdGlvbnMgPSBSZXNwb25zaXZlT3B0aW9uVHVwbGVbXTtcbi8qKlxuICogUmVwcmVzZW50cyBjaGFydCBldmVudHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRFdmVudCB7XG4gICAgW2V2ZW50TmFtZTogc3RyaW5nXTogKGRhdGE6IGFueSkgPT4gdm9pZDtcbn1cbi8qKlxuICogQW5ndWxhciBjb21wb25lbnQgd2hpY2ggcmVuZGVycyBDaGFydGlzdCBjaGFydC5cbiAqXG4gKiBTZWUgQ2hhcnRpc3Qge0BsaW5rIGh0dHBzOi8vZ2lvbmt1bnouZ2l0aHViLmlvL2NoYXJ0aXN0LWpzL2FwaS1kb2N1bWVudGF0aW9uLmh0bWwgQVBJIGRvY3VtZW50YXRpb259IGFuZFxuICoge0BsaW5rIGh0dHBzOi8vZ2lvbmt1bnouZ2l0aHViLmlvL2NoYXJ0aXN0LWpzL2V4YW1wbGVzLmh0bWwgZXhhbXBsZXN9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogIyMjIEV4YW1wbGVcbiBgYGBodG1sXG4gPHgtY2hhcnRpc3RcbiAgIFt0eXBlXT1cInR5cGVcIlxuICAgW2RhdGFdPVwiZGF0YVwiXG4gICBbb3B0aW9uc109XCJvcHRpb25zXCJcbiAgIFtyZXNwb25zaXZlT3B0aW9uc109XCJyZXNwb25zaXZlT3B0aW9uc1wiXG4gICBbZXZlbnRzXT1cImV2ZW50c1wiXG4gPjwveC1jaGFydGlzdD5cbiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2hhcnRpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGEgb2JqZWN0IHRoYXQgbmVlZHMgdG8gY29uc2lzdCBvZiBhIGxhYmVscyBhbmQgYSBzZXJpZXMgYXJyYXkuXG4gICAgICovXG4gICAgZGF0YTogQ2hhcnRpc3QuSUNoYXJ0aXN0RGF0YTtcbiAgICAvKipcbiAgICAgKiBDaGFydGlzdCBjaGFydCB0eXBlLlxuICAgICAqL1xuICAgIHR5cGU6IENoYXJ0VHlwZTtcbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyBvYmplY3Qgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAgICovXG4gICAgb3B0aW9uczogQ2hhcnRpc3QuSUNoYXJ0T3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiByZXNwb25zaXZlIG9wdGlvbiBhcnJheXMgd2hpY2ggYXJlIGEgbWVkaWEgcXVlcnkgYW5kIG9wdGlvbnMgb2JqZWN0IHBhaXI6IFtbbWVkaWFRdWVyeVN0cmluZywgb3B0aW9uc09iamVjdF0sW21vcmUuLi5dXVxuICAgICAqL1xuICAgIHJlc3BvbnNpdmVPcHRpb25zOiBSZXNwb25zaXZlT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBFdmVudHMgb2JqZWN0IHdoZXJlIGtleXMgYXJlIENoYXJ0aXN0IGV2ZW50IG5hbWVzIGFuZCB2YWx1ZXMgYXJlIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogU3VwcG9ydGVkIGV2ZW50cyBhcmU6IGRyYXcsIG9wdGlvbnNDaGFuZ2VkLCBkYXRhLCBhbmltYXRpb25CZWdpbiwgYW5pbWF0aW9uRW5kLCBjcmVhdGVkLlxuICAgICAqXG4gICAgICogRXZlbnQgaGFuZGxlciBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgYSBkYXRhIGFyZ3VtZW50IHdoaWNoIGNvbnRhaW5zIGV2ZW50IGRhdGEuXG4gICAgICovXG4gICAgZXZlbnRzOiBDaGFydEV2ZW50O1xuICAgIC8qKlxuICAgICAqIEV2ZW50IGVtaXR0ZWQgYWZ0ZXIgQ2hhcnRpc3QgY2hhcnQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAgICpcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSBjaGFydCBpbnN0YW5jZSBhcmd1bWVudC5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplZDogRXZlbnRFbWl0dGVyPENoYXJ0SW50ZXJmYWNlcz47XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBwcml2YXRlIGNoYXJ0O1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSByZW5kZXJDaGFydDtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHByaXZhdGUgdXBkYXRlO1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgcHJpdmF0ZSBiaW5kRXZlbnRzO1xufVxuIl19