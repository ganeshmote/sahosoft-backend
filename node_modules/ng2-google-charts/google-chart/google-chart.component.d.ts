import { ElementRef, OnChanges, SimpleChanges, EventEmitter } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
import { GoogleChartInterface, GoogleChartComponentInterface } from '../google-charts-interfaces';
import { ChartReadyEvent } from './chart-ready-event';
import { ChartErrorEvent } from './chart-error-event';
import { ChartSelectEvent } from './chart-select-event';
import { ChartMouseOverEvent, ChartMouseOutEvent } from './chart-mouse-event';
import * as ɵngcc0 from '@angular/core';
export declare class GoogleChartComponent implements OnChanges, GoogleChartComponentInterface {
    data: GoogleChartInterface;
    chartReady: EventEmitter<ChartReadyEvent>;
    chartReadyOneTime: EventEmitter<ChartReadyEvent>;
    chartError: EventEmitter<ChartErrorEvent>;
    chartErrorOneTime: EventEmitter<ChartErrorEvent>;
    chartSelect: EventEmitter<ChartSelectEvent>;
    chartSelectOneTime: EventEmitter<ChartSelectEvent>;
    mouseOver: EventEmitter<ChartMouseOverEvent>;
    mouseOverOneTime: EventEmitter<ChartMouseOverEvent>;
    mouseOut: EventEmitter<ChartMouseOutEvent>;
    mouseOutOneTime: EventEmitter<ChartMouseOutEvent>;
    wrapper: any;
    private cli;
    private options;
    private el;
    private loaderService;
    constructor(el: ElementRef, loaderService: GoogleChartsLoaderService);
    ngOnChanges(changes: SimpleChanges): void;
    draw(): void;
    /**
     * Applies formatters to data columns, if defined
     */
    private reformat;
    private getSelectorBySeriesType;
    /**
     * Given a column number, counts how many
     * columns have rol=="data". Those are mapped
     * one-to-one to the series array. When rol is not defined
     * a column of type number means a series column.
     * @param column to inspect
     */
    private getSeriesByColumn;
    private getBoundingBoxForItem;
    private getValueAtPosition;
    private getColumnTypeAtPosition;
    private getColumnLabelAtPosition;
    private getHTMLTooltip;
    private parseMouseEvent;
    private unregisterEvents;
    private registerChartEvents;
    private registerChartWrapperEvents;
    private addListener;
    private addOneTimeListener;
    private mouseOverListener;
    private mouseOutListener;
    private selectListener;
    private convertOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GoogleChartComponent, "google-chart", never, { "data": "data"; }, { "chartSelect": "chartSelect"; "chartSelectOneTime": "chartSelectOneTime"; "chartReady": "chartReady"; "chartReadyOneTime": "chartReadyOneTime"; "chartError": "chartError"; "chartErrorOneTime": "chartErrorOneTime"; "mouseOver": "mouseOver"; "mouseOverOneTime": "mouseOverOneTime"; "mouseOut": "mouseOut"; "mouseOutOneTime": "mouseOutOneTime"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJnb29nbGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBHb29nbGVDaGFydEludGVyZmFjZSwgR29vZ2xlQ2hhcnRDb21wb25lbnRJbnRlcmZhY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ2hhcnRSZWFkeUV2ZW50IH0gZnJvbSAnLi9jaGFydC1yZWFkeS1ldmVudCc7XG5pbXBvcnQgeyBDaGFydEVycm9yRXZlbnQgfSBmcm9tICcuL2NoYXJ0LWVycm9yLWV2ZW50JztcbmltcG9ydCB7IENoYXJ0U2VsZWN0RXZlbnQgfSBmcm9tICcuL2NoYXJ0LXNlbGVjdC1ldmVudCc7XG5pbXBvcnQgeyBDaGFydE1vdXNlT3ZlckV2ZW50LCBDaGFydE1vdXNlT3V0RXZlbnQgfSBmcm9tICcuL2NoYXJ0LW1vdXNlLWV2ZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdvb2dsZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBHb29nbGVDaGFydENvbXBvbmVudEludGVyZmFjZSB7XG4gICAgZGF0YTogR29vZ2xlQ2hhcnRJbnRlcmZhY2U7XG4gICAgY2hhcnRSZWFkeTogRXZlbnRFbWl0dGVyPENoYXJ0UmVhZHlFdmVudD47XG4gICAgY2hhcnRSZWFkeU9uZVRpbWU6IEV2ZW50RW1pdHRlcjxDaGFydFJlYWR5RXZlbnQ+O1xuICAgIGNoYXJ0RXJyb3I6IEV2ZW50RW1pdHRlcjxDaGFydEVycm9yRXZlbnQ+O1xuICAgIGNoYXJ0RXJyb3JPbmVUaW1lOiBFdmVudEVtaXR0ZXI8Q2hhcnRFcnJvckV2ZW50PjtcbiAgICBjaGFydFNlbGVjdDogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0RXZlbnQ+O1xuICAgIGNoYXJ0U2VsZWN0T25lVGltZTogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0RXZlbnQ+O1xuICAgIG1vdXNlT3ZlcjogRXZlbnRFbWl0dGVyPENoYXJ0TW91c2VPdmVyRXZlbnQ+O1xuICAgIG1vdXNlT3Zlck9uZVRpbWU6IEV2ZW50RW1pdHRlcjxDaGFydE1vdXNlT3ZlckV2ZW50PjtcbiAgICBtb3VzZU91dDogRXZlbnRFbWl0dGVyPENoYXJ0TW91c2VPdXRFdmVudD47XG4gICAgbW91c2VPdXRPbmVUaW1lOiBFdmVudEVtaXR0ZXI8Q2hhcnRNb3VzZU91dEV2ZW50PjtcbiAgICB3cmFwcGVyOiBhbnk7XG4gICAgcHJpdmF0ZSBjbGk7XG4gICAgcHJpdmF0ZSBvcHRpb25zO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBkcmF3KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXBwbGllcyBmb3JtYXR0ZXJzIHRvIGRhdGEgY29sdW1ucywgaWYgZGVmaW5lZFxuICAgICAqL1xuICAgIHByaXZhdGUgcmVmb3JtYXQ7XG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RvckJ5U2VyaWVzVHlwZTtcbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGNvbHVtbiBudW1iZXIsIGNvdW50cyBob3cgbWFueVxuICAgICAqIGNvbHVtbnMgaGF2ZSByb2w9PVwiZGF0YVwiLiBUaG9zZSBhcmUgbWFwcGVkXG4gICAgICogb25lLXRvLW9uZSB0byB0aGUgc2VyaWVzIGFycmF5LiBXaGVuIHJvbCBpcyBub3QgZGVmaW5lZFxuICAgICAqIGEgY29sdW1uIG9mIHR5cGUgbnVtYmVyIG1lYW5zIGEgc2VyaWVzIGNvbHVtbi5cbiAgICAgKiBAcGFyYW0gY29sdW1uIHRvIGluc3BlY3RcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFNlcmllc0J5Q29sdW1uO1xuICAgIHByaXZhdGUgZ2V0Qm91bmRpbmdCb3hGb3JJdGVtO1xuICAgIHByaXZhdGUgZ2V0VmFsdWVBdFBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0Q29sdW1uVHlwZUF0UG9zaXRpb247XG4gICAgcHJpdmF0ZSBnZXRDb2x1bW5MYWJlbEF0UG9zaXRpb247XG4gICAgcHJpdmF0ZSBnZXRIVE1MVG9vbHRpcDtcbiAgICBwcml2YXRlIHBhcnNlTW91c2VFdmVudDtcbiAgICBwcml2YXRlIHVucmVnaXN0ZXJFdmVudHM7XG4gICAgcHJpdmF0ZSByZWdpc3RlckNoYXJ0RXZlbnRzO1xuICAgIHByaXZhdGUgcmVnaXN0ZXJDaGFydFdyYXBwZXJFdmVudHM7XG4gICAgcHJpdmF0ZSBhZGRMaXN0ZW5lcjtcbiAgICBwcml2YXRlIGFkZE9uZVRpbWVMaXN0ZW5lcjtcbiAgICBwcml2YXRlIG1vdXNlT3Zlckxpc3RlbmVyO1xuICAgIHByaXZhdGUgbW91c2VPdXRMaXN0ZW5lcjtcbiAgICBwcml2YXRlIHNlbGVjdExpc3RlbmVyO1xuICAgIHByaXZhdGUgY29udmVydE9wdGlvbnM7XG59XG4iXX0=